#include <LiquidCrystal.h>
#include <Wire.h>
#define REDLITE 3
#define GREENLITE 5
#define BLUELITE 6

LiquidCrystal lcd(7, 8, 9, 10, 11, 12);

//Constant Variables
int brightness = 255;
const int buttonPin1 = 2;
const int buttonPin2 = 13;

//Changing Variables
int count = 0;
int lastButton1State = LOW;
int lastButton2State = LOW;
int poop = 0;
unsigned long time;
int days = 0;
int hours = 0;
int minutes = 0;
int seconds = 0;



void setup() {
  // put your setup code here, to run once:

  lcd.begin(16, 2);

  pinMode(REDLITE, OUTPUT);
  pinMode(GREENLITE, OUTPUT);
  pinMode(BLUELITE, OUTPUT);

  Serial.begin(9600);
}


float printMenu()
{
  lcd.setCursor(0, 0);
  lcd.print("Choose function");
  lcd.setCursor(0, 1);
  lcd.print("1, 2, 3, 4");
}
void loop() {
  // put your main code here, to run repeatedly:
  analogWrite(REDLITE, 100);
  analogWrite(GREENLITE, 100);
  analogWrite(BLUELITE, 100);



  int button1State = digitalRead(buttonPin1);

  if (button1State != lastButton1State) {
    if (button1State == HIGH) {
      count++;
    } else {

    }
    delay(50);
  }
  lastButton1State = button1State;

  switch (count) {
    case 1: lcd.setCursor(0, 1);
    case 2: lcd.setCursor(3, 1);
    case 3: lcd.setCursor(6, 1);
    case 4: lcd.setCursor(9, 1);
  }

  if (count > 3) {
    count = 0;
  }

  int button2State = digitalRead(buttonPin2);

  if (button2State != lastButton2State) {
    if (button2State == HIGH) {
      poop++;
    } else {

    }
    delay(50);
  }
  lastButton2State = button2State;



  if (poop % 2 == 0 ) {
    switch (count) {
      case 1: performStopWatch();
      case 2: performTallyCounter();
        break;
      case 3: return 0;
      case 4: return 0;
    }

  } else {

  }

}


void performStopWatch() {
  int days = 0;
  int hours = 0;
  int minutes = 0;
  int seconds = 0;
  time = millis();
  seconds = time / 1000; //Turn miliseconds into a useable unit

  //Check days
  if (seconds >= 86400)
  {
    days = seconds / 86400;
    seconds = seconds % 86400; // Remove days from total seconds
  }
  //Check hours
  if (seconds >= 3600)
  {
    hours = seconds / 3600;
    seconds = seconds % 3600; //Remove hours from total seconds
  }
  //Check minutes
  if (seconds >= 60)
  {
    minutes = seconds / 60;
    seconds = seconds % 60; //Remove minutes from total seconds
  }

  printTime();
}

float printTime()
{
  lcd.setCursor(0, 0);
  lcd.print("Time active");
  lcd.setCursor(0, 1);
  if (days < 10) {
    lcd.print("0");
  }
  lcd.print(days); lcd.print(":");

  if (hours < 10) {
    lcd.print("0");
  }
  lcd.print(hours); lcd.print(":");

  if (minutes < 10) {
    lcd.print("0");
  }
  lcd.print(minutes); lcd.print(":");

  if (seconds < 10) {
    lcd.print("0");
  }
  lcd.print(seconds);


  delay (1000);
}



void performTallyCounter() {
  int buttonState1 = digitalRead(buttonPin1);
  int reee = 0;
  if (buttonState1 != lastButton1State) {
    if (buttonState1 == HIGH) {
      reee++;
    }  else {

    }
    delay(50);
  }
  lastButton1State = buttonState1;


  lcd.print("Button pressed");
  lcd.setCursor(0, 1);
  lcd.print(count);
  lcd.print(" times           ");

}
